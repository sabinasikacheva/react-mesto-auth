{"ast":null,"code":"const BASE_URL = 'https://auth.nomoreparties.co';\nconst headers = {\n  'Content-Type': 'application/json'\n};\n\n// проверка ответа от сервера на корректность(используется в остальных методах)\nconst getJson = res => {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ошибка: ${res.status}`); // если ошибка, отклоняем промис\n};\n\nconst request = (url, options) => {\n  return fetch(`${BASE_URL}${url}`, options).then(getJson);\n};\n\n// регистрация\nexport const register = (password, email) => {\n  return request('/signup', {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify({\n      password,\n      email\n    })\n  });\n};\n\n// авторизация\nexport const authorize = (password, email) => {\n  return request('/signin', {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify({\n      password,\n      email\n    })\n  });\n};\n\n// проверка валидности токена и получение email\nexport const checkToken = token => {\n  return request('/users/me', {\n    method: 'GET',\n    headers: {\n      headers,\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n};\n//   const BASE_URL = 'https://auth.nomoreparties.co';\n// const headers = {\n//   'Content-Type': 'application/json'\n// }\n\n//   // проверка ответа от сервера на корректность(используется в остальных методах)\n//   const checkError = (res) =>  {\n//     if (res.ok) {\n//       return res.json();\n//     }\n\n//     return Promise.reject(`Ошибка: ${res.status}`)  // если ошибка, отклоняем промис\n//   }\n\n//   // const request = (url, options) => {\n//   //   return fetch(`${BASE_URL}${url}`, options).then(getRequestState)\n//   // }\n\n//   // регистрация\n//   export const register = (email, password) => {\n//     return fetch(`${BASE_URL}/signup`, {\n//       method: 'POST',\n//       headers: headers,\n//       body: JSON.stringify({\n//         password,\n//         email\n//       })\n//     }).then(checkError);\n//   };\n\n//   // авторизация\n//   export const authorize = (email, password) => {\n//     return fetch(`${BASE_URL}/signin`, {\n//       method: 'POST',\n//       headers: headers,\n//       body: JSON.stringify({\n//         password,\n//         email\n//       })\n//     }).then(checkError);\n//   };\n\n//   // проверка валидности токена и получение email\n//   export const checkToken = (token) => {\n//     return fetch(`${BASE_URL}/users/me`, {\n//       method: 'GET',\n//       headers: {\n//         headers,\n//         \"Authorization\" : `Bearer ${token}`\n//       }\n//     }).then(checkError);\n//   };\n\n// // // const BASE_URL = \"https://auth.nomoreparties.co\"\n\n// // // function checkResponse(res) {\n// // //   if (res.ok) {\n// // //     return res.json()\n// // //   }\n// // //   return Promise.reject(`${res.status}`)\n// // // }\n\n// // // export const register = (email, password) => {\n// // //   return fetch(`${BASE_URL}/signup`, {\n// // //     method: \"POST\",\n// // //     headers: {\n// // //       Accept: \"application/json\",\n// // //       \"Content-Type\": \"application/json\",\n// // //     },\n// // //     body: JSON.stringify({\n// // //       email: email,\n// // //       password: password,\n// // //     }),\n// // //   }).then(checkResponse)\n// // // }\n\n// // // export const login = (email, password) => {\n// // //   return fetch(`${BASE_URL}/signin`, {\n// // //     method: \"POST\",\n// // //     headers: {\n// // //       \"Content-Type\": \"application/json\",\n// // //     },\n// // //     body: JSON.stringify({\n// // //       email: email,\n// // //       password: password,\n// // //     }),\n// // //   })\n// // //     .then(checkResponse)\n// // //     .then((data) => {\n// // //       if (data.token) {\n// // //         localStorage.setItem(\"jwt\", data.token)\n// // //         return data\n// // //       }\n// // //     })\n// // // }\n\n// // // export const checkToken = (jwt) => {\n// // //   return fetch(`${BASE_URL}/users/me`, {\n// // //     method: \"GET\",\n// // //     headers: {\n// // //       \"Content-Type\": \"application/json\",\n// // //       Authorization: `Bearer ${jwt}`,\n// // //     },\n// // //   }).then(checkResponse)\n// // // }","map":{"version":3,"names":["BASE_URL","headers","getJson","res","ok","json","Promise","reject","status","request","url","options","fetch","then","register","password","email","method","body","JSON","stringify","authorize","checkToken","token"],"sources":["/Users/admin/Documents/Sabina/react-mesto-auth/src/utils/AuthApi.js"],"sourcesContent":["const BASE_URL = 'https://auth.nomoreparties.co';\nconst headers = {\n  'Content-Type': 'application/json'\n}\n\n  // проверка ответа от сервера на корректность(используется в остальных методах)\n  const getJson = (res) =>  {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`)  // если ошибка, отклоняем промис\n  }\n\n  const request = (url, options) => {\n    return fetch(`${BASE_URL}${url}`, options).then(getJson)\n  }\n\n  // регистрация\n  export const register = (password, email) => {\n    return request('/signup', {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        password,\n        email\n      })\n    })\n  };\n\n  // авторизация\n  export const authorize = (password, email) => {\n    return request('/signin', {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        password,\n        email\n      })\n    })\n  };\n\n  // проверка валидности токена и получение email\n  export const checkToken = (token) => {\n    return request('/users/me', {\n      method: 'GET',\n      headers: {\n        headers,\n        \"Authorization\" : `Bearer ${token}`\n      }\n    })\n  };\n//   const BASE_URL = 'https://auth.nomoreparties.co';\n// const headers = {\n//   'Content-Type': 'application/json'\n// }\n\n//   // проверка ответа от сервера на корректность(используется в остальных методах)\n//   const checkError = (res) =>  {\n//     if (res.ok) {\n//       return res.json();\n//     }\n\n//     return Promise.reject(`Ошибка: ${res.status}`)  // если ошибка, отклоняем промис\n//   }\n\n//   // const request = (url, options) => {\n//   //   return fetch(`${BASE_URL}${url}`, options).then(getRequestState)\n//   // }\n\n//   // регистрация\n//   export const register = (email, password) => {\n//     return fetch(`${BASE_URL}/signup`, {\n//       method: 'POST',\n//       headers: headers,\n//       body: JSON.stringify({\n//         password,\n//         email\n//       })\n//     }).then(checkError);\n//   };\n\n//   // авторизация\n//   export const authorize = (email, password) => {\n//     return fetch(`${BASE_URL}/signin`, {\n//       method: 'POST',\n//       headers: headers,\n//       body: JSON.stringify({\n//         password,\n//         email\n//       })\n//     }).then(checkError);\n//   };\n\n//   // проверка валидности токена и получение email\n//   export const checkToken = (token) => {\n//     return fetch(`${BASE_URL}/users/me`, {\n//       method: 'GET',\n//       headers: {\n//         headers,\n//         \"Authorization\" : `Bearer ${token}`\n//       }\n//     }).then(checkError);\n//   };\n\n\n\n\n\n\n// // // const BASE_URL = \"https://auth.nomoreparties.co\"\n\n// // // function checkResponse(res) {\n// // //   if (res.ok) {\n// // //     return res.json()\n// // //   }\n// // //   return Promise.reject(`${res.status}`)\n// // // }\n\n// // // export const register = (email, password) => {\n// // //   return fetch(`${BASE_URL}/signup`, {\n// // //     method: \"POST\",\n// // //     headers: {\n// // //       Accept: \"application/json\",\n// // //       \"Content-Type\": \"application/json\",\n// // //     },\n// // //     body: JSON.stringify({\n// // //       email: email,\n// // //       password: password,\n// // //     }),\n// // //   }).then(checkResponse)\n// // // }\n\n// // // export const login = (email, password) => {\n// // //   return fetch(`${BASE_URL}/signin`, {\n// // //     method: \"POST\",\n// // //     headers: {\n// // //       \"Content-Type\": \"application/json\",\n// // //     },\n// // //     body: JSON.stringify({\n// // //       email: email,\n// // //       password: password,\n// // //     }),\n// // //   })\n// // //     .then(checkResponse)\n// // //     .then((data) => {\n// // //       if (data.token) {\n// // //         localStorage.setItem(\"jwt\", data.token)\n// // //         return data\n// // //       }\n// // //     })\n// // // }\n\n// // // export const checkToken = (jwt) => {\n// // //   return fetch(`${BASE_URL}/users/me`, {\n// // //     method: \"GET\",\n// // //     headers: {\n// // //       \"Content-Type\": \"application/json\",\n// // //       Authorization: `Bearer ${jwt}`,\n// // //     },\n// // //   }).then(checkResponse)\n// // // }"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,+BAA+B;AAChD,MAAMC,OAAO,GAAG;EACd,cAAc,EAAE;AAClB,CAAC;;AAEC;AACA,MAAMC,OAAO,GAAIC,GAAG,IAAM;EACxB,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,EAAE;EACnB;EAEA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC,EAAE;AAClD,CAAC;;AAED,MAAMC,OAAO,GAAGA,CAACC,GAAG,EAAEC,OAAO,KAAK;EAChC,OAAOC,KAAK,CAAE,GAAEZ,QAAS,GAAEU,GAAI,EAAC,EAAEC,OAAO,CAAC,CAACE,IAAI,CAACX,OAAO,CAAC;AAC1D,CAAC;;AAED;AACA,OAAO,MAAMY,QAAQ,GAAGA,CAACC,QAAQ,EAAEC,KAAK,KAAK;EAC3C,OAAOP,OAAO,CAAC,SAAS,EAAE;IACxBQ,MAAM,EAAE,MAAM;IACdhB,OAAO,EAAEA,OAAO;IAChBiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBL,QAAQ;MACRC;IACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,SAAS,GAAGA,CAACN,QAAQ,EAAEC,KAAK,KAAK;EAC5C,OAAOP,OAAO,CAAC,SAAS,EAAE;IACxBQ,MAAM,EAAE,MAAM;IACdhB,OAAO,EAAEA,OAAO;IAChBiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBL,QAAQ;MACRC;IACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,UAAU,GAAIC,KAAK,IAAK;EACnC,OAAOd,OAAO,CAAC,WAAW,EAAE;IAC1BQ,MAAM,EAAE,KAAK;IACbhB,OAAO,EAAE;MACPA,OAAO;MACP,eAAe,EAAI,UAASsB,KAAM;IACpC;EACF,CAAC,CAAC;AACJ,CAAC;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}