{"ast":null,"code":"const BASE_URL = 'https://auth.nomoreparties.co';\nconst headers = {\n  'Content-Type': 'application/json'\n};\n\n// проверка ответа от сервера на корректность(используется в остальных методах)\nconst checkError = res => {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ошибка: ${res.status}`); // если ошибка, отклоняем промис\n};\n\n// const request = (url, options) => {\n//   return fetch(`${BASE_URL}${url}`, options).then(getRequestState)\n// }\n\n// регистрация\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => checkError(res));\n};\n\n// авторизация\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => checkError(res));\n};\n\n// проверка валидности токена и получение email\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      headers,\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(res => checkError(res));\n};\n// class AuthApi {\n//   constructor(baseUrl) {\n//     this._baseUrl = baseUrl;\n//   }\n//   // проверяет есть ли ошибка\n//   _checkError(res) {\n//     if (res.ok) {\n//       return res.json();\n//     }\n//     return Promise.reject(`Статус ошибки: ${res.status}`);\n//   }\n//   // регистрация пользователя\n//   registerUser(email, password) {\n//     return fetch(`${this._baseUrl}/signup`, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ email, password }),\n//     }).then((res) => this._checkError(res));\n//   }\n\n//   // вход пользователя\n//   loginUser(email, password) {\n//     return fetch(`${this._baseUrl}/signin`, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ email, password }),\n//     }).then((res) => this._checkError(res));\n//   }\n\n//   // проверяем токен\n//   checkToken(token) {\n//     return fetch(`${this._baseUrl}/users/me`, {\n//       method: \"GET\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     }).then((res) => this._checkError(res));\n//   }\n// }\n// const authApi = new AuthApi(\"https://auth.nomoreparties.co\");\n// export default authApi;\n\n// const BASE_URL = \"https://auth.nomoreparties.co\"\n\n// function checkResponse(res) {\n//   if (res.ok) {\n//     return res.json()\n//   }\n//   return Promise.reject(`${res.status}`)\n// }\n\n// export const register = (email, password) => {\n//   return fetch(`${BASE_URL}/signup`, {\n//     method: \"POST\",\n//     headers: {\n//       Accept: \"application/json\",\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({\n//       email: email,\n//       password: password,\n//     }),\n//   }).then(checkResponse)\n// }\n\n// export const login = (email, password) => {\n//   return fetch(`${BASE_URL}/signin`, {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({\n//       email: email,\n//       password: password,\n//     }),\n//   })\n//     .then(checkResponse)\n//     .then((data) => {\n//       if (data.token) {\n//         localStorage.setItem(\"jwt\", data.token)\n//         return data\n//       }\n//     })\n// }\n\n// export const checkToken = (jwt) => {\n//   return fetch(`${BASE_URL}/users/me`, {\n//     method: \"GET\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       Authorization: `Bearer ${jwt}`,\n//     },\n//   }).then(checkResponse)\n// }","map":{"version":3,"names":["BASE_URL","headers","checkError","res","ok","json","Promise","reject","status","register","email","password","fetch","method","body","JSON","stringify","then","authorize","checkToken","token"],"sources":["/Users/admin/Documents/Sabina/react-mesto-auth/src/utils/AuthApi.js"],"sourcesContent":["const BASE_URL = 'https://auth.nomoreparties.co';\nconst headers = {\n  'Content-Type': 'application/json'\n}\n\n  // проверка ответа от сервера на корректность(используется в остальных методах)\n  const checkError = (res) =>  {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`)  // если ошибка, отклоняем промис\n  }\n\n  // const request = (url, options) => {\n  //   return fetch(`${BASE_URL}${url}`, options).then(getRequestState)\n  // }\n\n  // регистрация\n  export const register = (email, password) => {\n    return fetch(`${BASE_URL}/signup`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then((res) => checkError(res));\n  };\n\n  // авторизация\n  export const authorize = (email, password) => {\n    return fetch(`${BASE_URL}/signin`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then((res) => checkError(res));\n  };\n\n  // проверка валидности токена и получение email\n  export const checkToken = (token) => {\n    return fetch(`${BASE_URL}/users/me`, {\n      method: 'GET',\n      headers: {\n        headers,\n        \"Authorization\" : `Bearer ${token}`\n      }\n    }).then((res) => checkError(res));\n  };\n// class AuthApi {\n//   constructor(baseUrl) {\n//     this._baseUrl = baseUrl;\n//   }\n//   // проверяет есть ли ошибка\n//   _checkError(res) {\n//     if (res.ok) {\n//       return res.json();\n//     }\n//     return Promise.reject(`Статус ошибки: ${res.status}`);\n//   }\n//   // регистрация пользователя\n//   registerUser(email, password) {\n//     return fetch(`${this._baseUrl}/signup`, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ email, password }),\n//     }).then((res) => this._checkError(res));\n//   }\n\n//   // вход пользователя\n//   loginUser(email, password) {\n//     return fetch(`${this._baseUrl}/signin`, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ email, password }),\n//     }).then((res) => this._checkError(res));\n//   }\n\n//   // проверяем токен\n//   checkToken(token) {\n//     return fetch(`${this._baseUrl}/users/me`, {\n//       method: \"GET\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     }).then((res) => this._checkError(res));\n//   }\n// }\n// const authApi = new AuthApi(\"https://auth.nomoreparties.co\");\n// export default authApi;\n\n\n\n// const BASE_URL = \"https://auth.nomoreparties.co\"\n\n// function checkResponse(res) {\n//   if (res.ok) {\n//     return res.json()\n//   }\n//   return Promise.reject(`${res.status}`)\n// }\n\n// export const register = (email, password) => {\n//   return fetch(`${BASE_URL}/signup`, {\n//     method: \"POST\",\n//     headers: {\n//       Accept: \"application/json\",\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({\n//       email: email,\n//       password: password,\n//     }),\n//   }).then(checkResponse)\n// }\n\n// export const login = (email, password) => {\n//   return fetch(`${BASE_URL}/signin`, {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({\n//       email: email,\n//       password: password,\n//     }),\n//   })\n//     .then(checkResponse)\n//     .then((data) => {\n//       if (data.token) {\n//         localStorage.setItem(\"jwt\", data.token)\n//         return data\n//       }\n//     })\n// }\n\n// export const checkToken = (jwt) => {\n//   return fetch(`${BASE_URL}/users/me`, {\n//     method: \"GET\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       Authorization: `Bearer ${jwt}`,\n//     },\n//   }).then(checkResponse)\n// }"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,+BAA+B;AAChD,MAAMC,OAAO,GAAG;EACd,cAAc,EAAE;AAClB,CAAC;;AAEC;AACA,MAAMC,UAAU,GAAIC,GAAG,IAAM;EAC3B,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,EAAE;EACnB;EAEA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC,EAAE;AAClD,CAAC;;AAED;AACA;AACA;;AAEA;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC3C,OAAOC,KAAK,CAAE,GAAEZ,QAAS,SAAQ,EAAE;IACjCa,MAAM,EAAE,MAAM;IACdZ,OAAO,EAAEA,OAAO;IAChBa,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBN,KAAK;MACLC;IACF,CAAC;EACH,CAAC,CAAC,CAACM,IAAI,CAAEd,GAAG,IAAKD,UAAU,CAACC,GAAG,CAAC,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAMe,SAAS,GAAGA,CAACR,KAAK,EAAEC,QAAQ,KAAK;EAC5C,OAAOC,KAAK,CAAE,GAAEZ,QAAS,SAAQ,EAAE;IACjCa,MAAM,EAAE,MAAM;IACdZ,OAAO,EAAEA,OAAO;IAChBa,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBN,KAAK;MACLC;IACF,CAAC;EACH,CAAC,CAAC,CAACM,IAAI,CAAEd,GAAG,IAAKD,UAAU,CAACC,GAAG,CAAC,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAMgB,UAAU,GAAIC,KAAK,IAAK;EACnC,OAAOR,KAAK,CAAE,GAAEZ,QAAS,WAAU,EAAE;IACnCa,MAAM,EAAE,KAAK;IACbZ,OAAO,EAAE;MACPA,OAAO;MACP,eAAe,EAAI,UAASmB,KAAM;IACpC;EACF,CAAC,CAAC,CAACH,IAAI,CAAEd,GAAG,IAAKD,UAAU,CAACC,GAAG,CAAC,CAAC;AACnC,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}