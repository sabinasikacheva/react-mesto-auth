{"ast":null,"code":"import _classCallCheck from\"/Users/admin/Documents/Sabina/react-mesto-auth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/admin/Documents/Sabina/react-mesto-auth/node_modules/@babel/runtime/helpers/esm/createClass.js\";var AuthApi=/*#__PURE__*/function(){function AuthApi(baseUrl){_classCallCheck(this,AuthApi);this._baseUrl=baseUrl;}// проверяет есть ли ошибка\n_createClass(AuthApi,[{key:\"_checkError\",value:function _checkError(res){if(res.ok){return res.json();}return Promise.reject(\"\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0438: \".concat(res.status));}// регистрация пользователя\n},{key:\"registerUser\",value:function registerUser(email,password){var _this=this;return fetch(\"\".concat(this._baseUrl,\"/signup\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({email:email,password:password})}).then(function(res){return _this._checkError(res);});}// вход пользователя\n},{key:\"loginUser\",value:function loginUser(email,password){var _this2=this;return fetch(\"\".concat(this._baseUrl,\"/signin\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({email:email,password:password})}).then(function(res){return _this2._checkError(res);});}// проверяем токен\n},{key:\"checkToken\",value:function checkToken(token){var _this3=this;return fetch(\"\".concat(this._baseUrl,\"/users/me\"),{method:\"GET\",headers:{\"Content-Type\":\"application/json\",Authorization:\"Bearer \".concat(token)}}).then(function(res){return _this3._checkError(res);});}}]);return AuthApi;}();var authApi=new AuthApi(\"https://auth.nomoreparties.co\");export default authApi;// const BASE_URL = \"https://auth.nomoreparties.co\"\n// function checkResponse(res) {\n//   if (res.ok) {\n//     return res.json()\n//   }\n//   return Promise.reject(`${res.status}`)\n// }\n// export const register = (email, password) => {\n//   return fetch(`${BASE_URL}/signup`, {\n//     method: \"POST\",\n//     headers: {\n//       Accept: \"application/json\",\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({\n//       email: email,\n//       password: password,\n//     }),\n//   }).then(checkResponse)\n// }\n// export const login = (email, password) => {\n//   return fetch(`${BASE_URL}/signin`, {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({\n//       email: email,\n//       password: password,\n//     }),\n//   })\n//     .then(checkResponse)\n//     .then((data) => {\n//       if (data.token) {\n//         localStorage.setItem(\"jwt\", data.token)\n//         return data\n//       }\n//     })\n// }\n// export const checkToken = (jwt) => {\n//   return fetch(`${BASE_URL}/users/me`, {\n//     method: \"GET\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       Authorization: `Bearer ${jwt}`,\n//     },\n//   }).then(checkResponse)\n// }","map":{"version":3,"names":["AuthApi","baseUrl","_classCallCheck","_baseUrl","_createClass","key","value","_checkError","res","ok","json","Promise","reject","concat","status","registerUser","email","password","_this","fetch","method","headers","body","JSON","stringify","then","loginUser","_this2","checkToken","token","_this3","Authorization","authApi"],"sources":["/Users/admin/Documents/Sabina/react-mesto-auth/src/utils/AuthApi.js"],"sourcesContent":["class AuthApi {\n  constructor(baseUrl) {\n    this._baseUrl = baseUrl;\n  }\n  // проверяет есть ли ошибка\n  _checkError(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Статус ошибки: ${res.status}`);\n  }\n  // регистрация пользователя\n  registerUser(email, password) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    }).then((res) => this._checkError(res));\n  }\n\n  // вход пользователя\n  loginUser(email, password) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    }).then((res) => this._checkError(res));\n  }\n\n  // проверяем токен\n  checkToken(token) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    }).then((res) => this._checkError(res));\n  }\n}\nconst authApi = new AuthApi(\"https://auth.nomoreparties.co\");\nexport default authApi;\n\n\n\n// const BASE_URL = \"https://auth.nomoreparties.co\"\n\n// function checkResponse(res) {\n//   if (res.ok) {\n//     return res.json()\n//   }\n//   return Promise.reject(`${res.status}`)\n// }\n\n// export const register = (email, password) => {\n//   return fetch(`${BASE_URL}/signup`, {\n//     method: \"POST\",\n//     headers: {\n//       Accept: \"application/json\",\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({\n//       email: email,\n//       password: password,\n//     }),\n//   }).then(checkResponse)\n// }\n\n// export const login = (email, password) => {\n//   return fetch(`${BASE_URL}/signin`, {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({\n//       email: email,\n//       password: password,\n//     }),\n//   })\n//     .then(checkResponse)\n//     .then((data) => {\n//       if (data.token) {\n//         localStorage.setItem(\"jwt\", data.token)\n//         return data\n//       }\n//     })\n// }\n\n// export const checkToken = (jwt) => {\n//   return fetch(`${BASE_URL}/users/me`, {\n//     method: \"GET\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       Authorization: `Bearer ${jwt}`,\n//     },\n//   }).then(checkResponse)\n// }"],"mappings":"yQAAM,CAAAA,OAAO,yBACX,SAAAA,QAAYC,OAAO,CAAE,CAAAC,eAAA,MAAAF,OAAA,EACnB,IAAI,CAACG,QAAQ,CAAGF,OAAO,CACzB,CACA;AAAAG,YAAA,CAAAJ,OAAA,GAAAK,GAAA,eAAAC,KAAA,CACA,SAAAC,YAAYC,GAAG,CAAE,CACf,GAAIA,GAAG,CAACC,EAAE,CAAE,CACV,MAAO,CAAAD,GAAG,CAACE,IAAI,EAAE,CACnB,CACA,MAAO,CAAAC,OAAO,CAACC,MAAM,+EAAAC,MAAA,CAAmBL,GAAG,CAACM,MAAM,EAAG,CACvD,CACA;AAAA,GAAAT,GAAA,gBAAAC,KAAA,CACA,SAAAS,aAAaC,KAAK,CAAEC,QAAQ,CAAE,KAAAC,KAAA,MAC5B,MAAO,CAAAC,KAAK,IAAAN,MAAA,CAAI,IAAI,CAACV,QAAQ,YAAW,CACtCiB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAER,KAAK,CAALA,KAAK,CAAEC,QAAQ,CAARA,QAAS,CAAC,CAC1C,CAAC,CAAC,CAACQ,IAAI,CAAC,SAACjB,GAAG,QAAK,CAAAU,KAAI,CAACX,WAAW,CAACC,GAAG,CAAC,GAAC,CACzC,CAEA;AAAA,GAAAH,GAAA,aAAAC,KAAA,CACA,SAAAoB,UAAUV,KAAK,CAAEC,QAAQ,CAAE,KAAAU,MAAA,MACzB,MAAO,CAAAR,KAAK,IAAAN,MAAA,CAAI,IAAI,CAACV,QAAQ,YAAW,CACtCiB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAER,KAAK,CAALA,KAAK,CAAEC,QAAQ,CAARA,QAAS,CAAC,CAC1C,CAAC,CAAC,CAACQ,IAAI,CAAC,SAACjB,GAAG,QAAK,CAAAmB,MAAI,CAACpB,WAAW,CAACC,GAAG,CAAC,GAAC,CACzC,CAEA;AAAA,GAAAH,GAAA,cAAAC,KAAA,CACA,SAAAsB,WAAWC,KAAK,CAAE,KAAAC,MAAA,MAChB,MAAO,CAAAX,KAAK,IAAAN,MAAA,CAAI,IAAI,CAACV,QAAQ,cAAa,CACxCiB,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClCU,aAAa,WAAAlB,MAAA,CAAYgB,KAAK,CAChC,CACF,CAAC,CAAC,CAACJ,IAAI,CAAC,SAACjB,GAAG,QAAK,CAAAsB,MAAI,CAACvB,WAAW,CAACC,GAAG,CAAC,GAAC,CACzC,CAAC,WAAAR,OAAA,KAEH,GAAM,CAAAgC,OAAO,CAAG,GAAI,CAAAhC,OAAO,CAAC,+BAA+B,CAAC,CAC5D,cAAe,CAAAgC,OAAO,CAItB;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}