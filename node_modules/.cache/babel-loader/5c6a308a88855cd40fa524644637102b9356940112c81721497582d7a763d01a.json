{"ast":null,"code":"const BASE_URL = 'https://auth.nomoreparties.co';\nconst headers = {\n  'Content-Type': 'application/json'\n};\n\n// проверка ответа от сервера на корректность(используется в остальных методах)\nconst getRequestState = res => {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ошибка: ${res.status}`); // если ошибка, отклоняем промис\n};\n\nconst request = (url, options) => {\n  return fetch(`${BASE_URL}${url}`, options).then(getRequestState);\n};\n\n// регистрация\nexport const register = (password, email) => {\n  return request('/signup', {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify({\n      password,\n      email\n    })\n  });\n};\n\n// авторизация\nexport const authorize = (password, email) => {\n  return request('/signin', {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify({\n      password,\n      email\n    })\n  });\n};\n\n// проверка валидности токена и получение email\nexport const checkToken = token => {\n  return request('/users/me', {\n    method: 'GET',\n    headers: {\n      headers,\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n};","map":{"version":3,"names":["BASE_URL","headers","getRequestState","res","ok","json","Promise","reject","status","request","url","options","fetch","then","register","password","email","method","body","JSON","stringify","authorize","checkToken","token"],"sources":["/Users/admin/Documents/Sabina/react-mesto-auth/src/utils/AuthApi.js"],"sourcesContent":["const BASE_URL = 'https://auth.nomoreparties.co';\nconst headers = {\n  'Content-Type': 'application/json'\n}\n\n  // проверка ответа от сервера на корректность(используется в остальных методах)\n  const getRequestState = (res) =>  {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`)  // если ошибка, отклоняем промис\n  }\n\n  const request = (url, options) => {\n    return fetch(`${BASE_URL}${url}`, options).then(getRequestState)\n  }\n\n  // регистрация\n  export const register = (password, email) => {\n    return request('/signup', {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        password,\n        email\n      })\n    })\n  };\n\n  // авторизация\n  export const authorize = (password, email) => {\n    return request('/signin', {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        password,\n        email\n      })\n    })\n  };\n\n  // проверка валидности токена и получение email\n  export const checkToken = (token) => {\n    return request('/users/me', {\n      method: 'GET',\n      headers: {\n        headers,\n        \"Authorization\" : `Bearer ${token}`\n      }\n    })\n  };\n "],"mappings":"AAAA,MAAMA,QAAQ,GAAG,+BAA+B;AAChD,MAAMC,OAAO,GAAG;EACd,cAAc,EAAE;AAClB,CAAC;;AAEC;AACA,MAAMC,eAAe,GAAIC,GAAG,IAAM;EAChC,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,EAAE;EACnB;EAEA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC,EAAE;AAClD,CAAC;;AAED,MAAMC,OAAO,GAAGA,CAACC,GAAG,EAAEC,OAAO,KAAK;EAChC,OAAOC,KAAK,CAAE,GAAEZ,QAAS,GAAEU,GAAI,EAAC,EAAEC,OAAO,CAAC,CAACE,IAAI,CAACX,eAAe,CAAC;AAClE,CAAC;;AAED;AACA,OAAO,MAAMY,QAAQ,GAAGA,CAACC,QAAQ,EAAEC,KAAK,KAAK;EAC3C,OAAOP,OAAO,CAAC,SAAS,EAAE;IACxBQ,MAAM,EAAE,MAAM;IACdhB,OAAO,EAAEA,OAAO;IAChBiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBL,QAAQ;MACRC;IACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,SAAS,GAAGA,CAACN,QAAQ,EAAEC,KAAK,KAAK;EAC5C,OAAOP,OAAO,CAAC,SAAS,EAAE;IACxBQ,MAAM,EAAE,MAAM;IACdhB,OAAO,EAAEA,OAAO;IAChBiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBL,QAAQ;MACRC;IACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,UAAU,GAAIC,KAAK,IAAK;EACnC,OAAOd,OAAO,CAAC,WAAW,EAAE;IAC1BQ,MAAM,EAAE,KAAK;IACbhB,OAAO,EAAE;MACPA,OAAO;MACP,eAAe,EAAI,UAASsB,KAAM;IACpC;EACF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}